When this principle is applied it means the high level classes are not working directly with low level classes, 
they are using interfaces as an abstract layer. 
In this case instantiation of new low level objects inside the high level classes(if necessary) 
can not be done using the operator new. 
Instead, some of the Creational design patterns can be used, 
such as Factory Method, Abstract Factory, Prototype.

The Template Design Pattern is an example where the DIP principle is applied.

Of course, using this principle implies an increased effort, 
will result in more classes and interfaces to maintain, 
in a few words in more complex code, but more flexible. 
This principle should not be applied blindly for every class or every module. 
If we have a class functionality that is more likely to remain unchanged in the future 
there is not need to apply this principle.